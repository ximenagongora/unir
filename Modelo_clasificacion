{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "EIdT9iu_Z4Rb"
   },
   "source": [
    "# Actividad 2- Clasificación"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "AHp3M9ZmrIxj"
   },
   "source": [
    "Para esta actividad de clasificación se busca un dataset en la página https://www.openml.org/d/1169 que trata de una Aerolinea de los estados de Estados Unidos. \n",
    "\n",
    "El desarrollo de esta actividad, voy a implementar dos algoritmos de clasificación uno basado en redes neuronales y basado en clasificación simple. Al finalizar, se hará un comparativo de estos modelos y se indicará cual se ajusta mejor al análisis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "gFh9ne3FZ-On"
   },
   "source": [
    "### Librerias empleadas\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-23T00:13:20.617330Z",
     "iopub.status.busy": "2020-09-23T00:13:20.616344Z",
     "iopub.status.idle": "2020-09-23T00:13:27.321654Z",
     "shell.execute_reply": "2020-09-23T00:13:27.321020Z"
    },
    "id": "1rRo8oNqZ-Rj"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.3.1\n"
     ]
    }
   ],
   "source": [
    "#Librerias que se emplean para el desarrollo de los modelos\n",
    "\n",
    "#Preparar y analizar los datos\n",
    "import numpy as np\n",
    "#Pandas porque me permite manipular y analizar los datos\n",
    "import pandas as pd\n",
    "#Permite crear gráficas\n",
    "import matplotlib.pyplot as plt\n",
    "#Seaborn para que me permita lavisualización de datos, es basada en matplotlib\n",
    "import seaborn as sns \n",
    "\n",
    "\n",
    "#Librerias empleadas para redes Neuronales\n",
    "#Tensorflow facilita la creación modelos de aprendizaje automático\n",
    "import tensorflow as tf\n",
    "#Keras es una API que ayuda a crear las redes neuronales \n",
    "from tensorflow import keras\n",
    "#Layers permite generar las capas que se empleará para la red neuronal\n",
    "from tensorflow.keras import layers\n",
    "from tensorflow.python.keras.models import Sequential\n",
    "from tensorflow.python.keras.layers import Conv2D, Dense, Flatten\n",
    "from tensorflow.python.keras.optimizers import SGD\n",
    "from tensorflow.keras.optimizers import SGD\n",
    "from tensorflow.python.keras.layers import InputLayer, Input\n",
    "from tensorflow.python.keras.layers import Reshape, MaxPooling2D\n",
    "from sklearn.datasets import make_circles\n",
    "\n",
    "\n",
    "#Librerias empleadas para Random Forest\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.model_selection import ParameterGrid\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "print(tf.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "F_72b0LCNbjx"
   },
   "source": [
    "## Red neuronal de clasificación\n",
    "\n",
    "el set de datos esta disponible de el siguiente repositorio https://raw.githubusercontent.com/ximenagongora/unir/master/REPORTING.csv\n",
    "\n",
    "En un problema de *Clasificacion*, se busca seleccionar una clase de una lista de clases."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "gFh9ne3FZ-On"
   },
   "source": [
    "### Caracterísiticas de los datos\n",
    "Primero descargue el set de datos, luego se realiza los modelos de predicción de los vuelos entre los estados de los Estados Unidos de norte América.\n",
    "Para el desarrollo de esta actividad, se toman las varibles que influyen y pueden ser decisivos para nuestra clasificación, como lo es: Retraso de vuelos, dia de la semana, aeropuerto de destino, aeropuerto de origen, arrivo tardío, tiempo de vuelo y la distancia de trayecto. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-23T00:13:27.670510Z",
     "iopub.status.busy": "2020-09-23T00:13:27.667688Z",
     "iopub.status.idle": "2020-09-23T00:13:27.689919Z",
     "shell.execute_reply": "2020-09-23T00:13:27.689290Z"
    },
    "id": "CiX2FI4gZtTt"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ARR_DELAY_NEW</th>\n",
       "      <th>DAY_OF_WEEK</th>\n",
       "      <th>ORIGIN_AIRPORT_SEQ_ID</th>\n",
       "      <th>DEST_AIRPORT_SEQ_ID</th>\n",
       "      <th>DEP_DELAY_NEW</th>\n",
       "      <th>AIR_TIME</th>\n",
       "      <th>DISTANCE</th>\n",
       "      <th>RETRASO</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1594</th>\n",
       "      <td>43.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1410005</td>\n",
       "      <td>1320402</td>\n",
       "      <td>47.0</td>\n",
       "      <td>131.0</td>\n",
       "      <td>861</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1595</th>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1410005</td>\n",
       "      <td>1320402</td>\n",
       "      <td>0.0</td>\n",
       "      <td>127.0</td>\n",
       "      <td>861</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1596</th>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1410005</td>\n",
       "      <td>1323202</td>\n",
       "      <td>0.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>668</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1597</th>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1410005</td>\n",
       "      <td>1323202</td>\n",
       "      <td>4.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>668</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1598</th>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1410005</td>\n",
       "      <td>1323202</td>\n",
       "      <td>0.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>668</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      ARR_DELAY_NEW  DAY_OF_WEEK  ORIGIN_AIRPORT_SEQ_ID  DEST_AIRPORT_SEQ_ID  \\\n",
       "1594           43.0            4                1410005              1320402   \n",
       "1595            0.0            4                1410005              1320402   \n",
       "1596            0.0            4                1410005              1323202   \n",
       "1597            0.0            4                1410005              1323202   \n",
       "1598            0.0            4                1410005              1323202   \n",
       "\n",
       "      DEP_DELAY_NEW  AIR_TIME  DISTANCE  RETRASO  \n",
       "1594           47.0     131.0       861        0  \n",
       "1595            0.0     127.0       861        1  \n",
       "1596            0.0     101.0       668        1  \n",
       "1597            4.0     101.0       668        1  \n",
       "1598            0.0     102.0       668        1  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Se seleccionan las variables que se van a trabajar que van a ser relevantes para estudiar y predecir como se comporta el vuelo, si hubo o no retraso en el\n",
    "column_names = ['ARR_DELAY_NEW','DAY_OF_WEEK','ORIGIN_AIRPORT_SEQ_ID', 'DEST_AIRPORT_SEQ_ID', 'DEP_DELAY_NEW', 'AIR_TIME', 'DISTANCE']\n",
    "#Se importa usando pandas para leer el archivo CSV, sacandolo de la URL \n",
    "raw_dataset = pd.read_csv(\"https://raw.githubusercontent.com/ximenagongora/unir/master/REPORTING.csv\",delimiter= ';') \n",
    "\n",
    "#Aqui cojo ese dataset, las columnas que deseo evaluar y las copio, para que sea manejable trabajar en ello\n",
    "dataset = raw_dataset.copy()\n",
    "dataset = dataset[column_names]\n",
    "\n",
    "#Convierto la información que se encuentra en la columna ARR_DELAY_NEW para que sea la clase de mi analisis, cero (0) en caso de no existir\n",
    "#retraso, uno (1) cuando existe retraso.\n",
    "dataset ['RETRASO'] = np.where(dataset['ARR_DELAY_NEW'] == 0, 1, 'ARR_DELAY_NEW'==0 )\n",
    "#Hago un print de la información de mi dataset para los últimos campos\n",
    "dataset.tail()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ARR_DELAY_NEW</th>\n",
       "      <th>DAY_OF_WEEK</th>\n",
       "      <th>ORIGIN_AIRPORT_SEQ_ID</th>\n",
       "      <th>DEST_AIRPORT_SEQ_ID</th>\n",
       "      <th>DEP_DELAY_NEW</th>\n",
       "      <th>AIR_TIME</th>\n",
       "      <th>DISTANCE</th>\n",
       "      <th>RETRASO</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>68.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1389101</td>\n",
       "      <td>1477104</td>\n",
       "      <td>41.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>363</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1389101</td>\n",
       "      <td>1477104</td>\n",
       "      <td>0.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>363</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1389101</td>\n",
       "      <td>1483106</td>\n",
       "      <td>0.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>333</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1389101</td>\n",
       "      <td>1483106</td>\n",
       "      <td>10.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>333</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1389101</td>\n",
       "      <td>1483106</td>\n",
       "      <td>1.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>333</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1594</th>\n",
       "      <td>43.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1410005</td>\n",
       "      <td>1320402</td>\n",
       "      <td>47.0</td>\n",
       "      <td>131.0</td>\n",
       "      <td>861</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1595</th>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1410005</td>\n",
       "      <td>1320402</td>\n",
       "      <td>0.0</td>\n",
       "      <td>127.0</td>\n",
       "      <td>861</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1596</th>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1410005</td>\n",
       "      <td>1323202</td>\n",
       "      <td>0.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>668</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1597</th>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1410005</td>\n",
       "      <td>1323202</td>\n",
       "      <td>4.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>668</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1598</th>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1410005</td>\n",
       "      <td>1323202</td>\n",
       "      <td>0.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>668</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1599 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      ARR_DELAY_NEW  DAY_OF_WEEK  ORIGIN_AIRPORT_SEQ_ID  DEST_AIRPORT_SEQ_ID  \\\n",
       "0              68.0            3                1389101              1477104   \n",
       "1               0.0            3                1389101              1477104   \n",
       "2               0.0            3                1389101              1483106   \n",
       "3              10.0            3                1389101              1483106   \n",
       "4               0.0            3                1389101              1483106   \n",
       "...             ...          ...                    ...                  ...   \n",
       "1594           43.0            4                1410005              1320402   \n",
       "1595            0.0            4                1410005              1320402   \n",
       "1596            0.0            4                1410005              1323202   \n",
       "1597            0.0            4                1410005              1323202   \n",
       "1598            0.0            4                1410005              1323202   \n",
       "\n",
       "      DEP_DELAY_NEW  AIR_TIME  DISTANCE  RETRASO  \n",
       "0              41.0      74.0       363        0  \n",
       "1               0.0      71.0       363        1  \n",
       "2               0.0      57.0       333        1  \n",
       "3              10.0      63.0       333        0  \n",
       "4               1.0      57.0       333        1  \n",
       "...             ...       ...       ...      ...  \n",
       "1594           47.0     131.0       861        0  \n",
       "1595            0.0     127.0       861        1  \n",
       "1596            0.0     101.0       668        1  \n",
       "1597            4.0     101.0       668        1  \n",
       "1598            0.0     102.0       668        1  \n",
       "\n",
       "[1599 rows x 8 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Sacar la cantidad de filas y columnas que tiene el dataset\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1599 entries, 0 to 1598\n",
      "Data columns (total 8 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   ARR_DELAY_NEW          1592 non-null   float64\n",
      " 1   DAY_OF_WEEK            1599 non-null   int64  \n",
      " 2   ORIGIN_AIRPORT_SEQ_ID  1599 non-null   int64  \n",
      " 3   DEST_AIRPORT_SEQ_ID    1599 non-null   int64  \n",
      " 4   DEP_DELAY_NEW          1593 non-null   float64\n",
      " 5   AIR_TIME               1592 non-null   float64\n",
      " 6   DISTANCE               1599 non-null   int64  \n",
      " 7   RETRASO                1599 non-null   int64  \n",
      "dtypes: float64(3), int64(5)\n",
      "memory usage: 100.1 KB\n"
     ]
    }
   ],
   "source": [
    "dataset.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ARR_DELAY_NEW            7\n",
       "DAY_OF_WEEK              0\n",
       "ORIGIN_AIRPORT_SEQ_ID    0\n",
       "DEST_AIRPORT_SEQ_ID      0\n",
       "DEP_DELAY_NEW            6\n",
       "AIR_TIME                 7\n",
       "DISTANCE                 0\n",
       "RETRASO                  0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Realizo una consulta para saber que variables que conforman el dataset se encuentran con campos vacios o nulos\n",
    "dataset.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#En la consulta anterior nos aparece que existen 7 campos nulos en ARR_DELAY_NEW, DEP_DELAY_NEW CON 6, AIR_TIME CON 7\n",
    "#Lo que realizaré acontinuación es eliminar esos campos nulos para que no se vaya a presentar más adelante inconveniente\n",
    "#por el tipo de variable o por falta de contenido de información\n",
    "dataset = dataset.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ARR_DELAY_NEW            0\n",
       "DAY_OF_WEEK              0\n",
       "ORIGIN_AIRPORT_SEQ_ID    0\n",
       "DEST_AIRPORT_SEQ_ID      0\n",
       "DEP_DELAY_NEW            0\n",
       "AIR_TIME                 0\n",
       "DISTANCE                 0\n",
       "RETRASO                  0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verifico si se realizó el cambio\n",
    "dataset.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1592 entries, 0 to 1598\n",
      "Data columns (total 8 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   ARR_DELAY_NEW          1592 non-null   float64\n",
      " 1   DAY_OF_WEEK            1592 non-null   int64  \n",
      " 2   ORIGIN_AIRPORT_SEQ_ID  1592 non-null   int64  \n",
      " 3   DEST_AIRPORT_SEQ_ID    1592 non-null   int64  \n",
      " 4   DEP_DELAY_NEW          1592 non-null   float64\n",
      " 5   AIR_TIME               1592 non-null   float64\n",
      " 6   DISTANCE               1592 non-null   int64  \n",
      " 7   RETRASO                1592 non-null   int64  \n",
      "dtypes: float64(3), int64(5)\n",
      "memory usage: 191.9 KB\n"
     ]
    }
   ],
   "source": [
    "dataset.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ximenagongora/opt/anaconda3/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7fd95a424ee0>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAW4AAAFuCAYAAAChovKPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAATaUlEQVR4nO3df6zd913f8eerdpumlKgxcVLXDjgwr8IJqF2uQgfb1C2IeMBwBIS5UhYXonlD5kfRBk2YRDYmS9noGC0jlTyWxtlKMq/8iMtUSmYoBS1tdttmJHbqxsNVcokb37YTabeSYu+9P8434+zm2r1c+55z377Ph3R0zvl8f5yPI+uZr77ne75OVSFJ6uNl056AJOkvxnBLUjOGW5KaMdyS1IzhlqRmDLckNbNi4U5yb5JTSZ4YG/u5JJ9M8odJfj3Ja8aW3ZnkeJJjSW4aG78+yePDsnclyUrNWZI6WMkj7vuAHQvGHgauq6pvBj4F3AmQZDuwC7h22OaeJOuGbd4N7AG2DY+F+5SkNWXFwl1VHwY+v2Dst6vq9PD2I8CW4fVO4MGqeqGqTgDHgRuSbAIuq6pHavRLofuBm1dqzpLUwfopfvYPAf9xeL2ZUchfNDeM/dnweuH4opLsYXR0zvbt268/cuTIhZyvJE3aoqeGp/LlZJJ/ApwG3vvi0CKr1TnGF1VV+6tqpqpmLr300vOfqCStQhM/4k6yG/hu4Mb68xulzAFXj622BXh2GN+yyLgkrVkTPeJOsgN4O/A9VfW/xxYdAnYluSTJNYy+hHy0qk4CX0jypuFqktuAhyY5Z0labVbsiDvJA8CbgSuSzAF3MbqK5BLg4eGqvo9U1T+sqiNJDgJHGZ1C2VtVZ4Zd/TCjK1QuBT4wPCRpzcrFelvXmZmZmp2dnfY0JOl8rJ4vJyVJy2e4JakZwy1JzRhuSWrGcEtSM4Zbkpox3JLUjOGWpGYMtyQ1M83bukpr1tM/+03TnoIm4Gt/5vEV2a9H3JLUjOGWpGYMtyQ1Y7glqRnDLUnNGG5JasZwS1IzhluSmjHcktSM4ZakZgy3JDVjuCWpGcMtSc0YbklqxnBLUjOGW5KaMdyS1IzhlqRmDLckNWO4JakZwy1JzRhuSWrGcEtSM4Zbkpox3JLUjOGWpGYMtyQ1Y7glqRnDLUnNGG5JasZwS1IzhluSmjHcktSM4ZakZlYs3EnuTXIqyRNjYxuSPJzkqeH58rFldyY5nuRYkpvGxq9P8viw7F1JslJzlqQOVvKI+z5gx4KxO4DDVbUNODy8J8l2YBdw7bDNPUnWDdu8G9gDbBseC/cpSWvKioW7qj4MfH7B8E7gwPD6AHDz2PiDVfVCVZ0AjgM3JNkEXFZVj1RVAfePbSNJa9Kkz3FfVVUnAYbnK4fxzcAzY+vNDWObh9cLxxeVZE+S2SSz8/PzF3TikrRarJYvJxc7b13nGF9UVe2vqpmqmtm4ceMFm5wkrSaTDvdzw+kPhudTw/gccPXYeluAZ4fxLYuMS9KaNelwHwJ2D693Aw+Nje9KckmSaxh9CfnocDrlC0neNFxNctvYNpK0Jq1fqR0neQB4M3BFkjngLuBu4GCS24GngVsAqupIkoPAUeA0sLeqzgy7+mFGV6hcCnxgeEjSmrVi4a6qt5xl0Y1nWX8fsG+R8Vngugs4NUlqbbV8OSlJWiLDLUnNGG5JasZwS1IzhluSmjHcktSM4ZakZgy3JDVjuCWpGcMtSc0YbklqxnBLUjOGW5KaMdyS1IzhlqRmDLckNWO4JakZwy1JzRhuSWrGcEtSM4Zbkpox3JLUjOGWpGYMtyQ1Y7glqRnDLUnNGG5JasZwS1IzhluSmjHcktSM4ZakZgy3JDVjuCWpGcMtSc0YbklqxnBLUjOGW5KaMdyS1IzhlqRmDLckNWO4JakZwy1JzRhuSWrGcEtSM1MJd5KfSHIkyRNJHkjyyiQbkjyc5Knh+fKx9e9McjzJsSQ3TWPOkrRaTDzcSTYDPwbMVNV1wDpgF3AHcLiqtgGHh/ck2T4svxbYAdyTZN2k5y1Jq8W0TpWsBy5Nsh54FfAssBM4MCw/ANw8vN4JPFhVL1TVCeA4cMNkpytJq8fEw11Vfwy8A3gaOAn8SVX9NnBVVZ0c1jkJXDlsshl4ZmwXc8PYSyTZk2Q2yez8/PxK/REkaaqmcarkckZH0dcArwO+Ksmt59pkkbFabMWq2l9VM1U1s3HjxvOfrCStQtM4VfLtwImqmq+qPwN+DfhW4LkkmwCG51PD+nPA1WPbb2F0akWS1qRphPtp4E1JXpUkwI3Ak8AhYPewzm7goeH1IWBXkkuSXANsAx6d8JwladVYP+kPrKqPJnkf8HHgNPAJYD/wauBgktsZxf2WYf0jSQ4CR4f191bVmUnPW5JWi4mHG6Cq7gLuWjD8AqOj78XW3wfsW+l5SVIH/nJSkpox3JLUjOGWpGYMtyQ1Y7glqRnDLUnNGG5JasZwS1IzhluSmjHcktSM4ZakZgy3JDVjuCWpGcMtSc0YbklqxnBLUjOGW5KaMdyS1IzhlqRmDLckNWO4JakZwy1JzRhuSWrGcEtSM4Zbkpox3JLUjOGWpGYMtyQ1Y7glqRnDLUnNGG5JasZwS1IzhluSmjHcktSM4ZakZgy3JDWzpHAnObyUMUnSylt/roVJXgm8CrgiyeVAhkWXAa9b4blJkhZxznAD/wB4G6NIf4w/D/fzwC+t3LQkSWdzznBX1TuBdyb50ar6xQnNSZJ0Dl/piBuAqvrFJN8KbB3fpqruX6F5SZLOYknhTvLvgW8AHgPODMMFGG5JmrAlhRuYAbZXVa3kZCRJX9lSr+N+AnjtSk5EkrQ0Sw33FcDRJB9McujFx3I/NMlrkrwvySeTPJnkrybZkOThJE8Nz5ePrX9nkuNJjiW5abmfK0kXg6WeKvmnF/hz3wn8VlV9f5JXMLpW/KeBw1V1d5I7gDuAtyfZDuwCrmV0WeJ/SfKXq+rM2XYuSRezpV5V8nsX6gOTXAb8DeCtw76/DHw5yU7gzcNqB4APAW8HdgIPVtULwIkkx4EbgEcu1JwkqZOl/uT9C0meHx5/muRMkueX+ZlfD8wD70nyiSS/nOSrgKuq6iTA8HzlsP5m4Jmx7eeGscXmuSfJbJLZ+fn5ZU5Pkla3JYW7qr66qi4bHq8Evg/4N8v8zPXAXwHeXVVvBP4Xo9MiZ5NFxha9uqWq9lfVTFXNbNy4cZnTk6TVbVl3B6yq3wD+1jI/cw6Yq6qPDu/fxyjkzyXZBDA8nxpb/+qx7bcAzy7zsyWpvaX+AOd7x96+jNF13cu6pruqPpPkmSSvr6pjwI3A0eGxG7h7eH5o2OQQ8CtJfp7Rl5PbgEeX89mSdDFY6lUlf2fs9Wng04y+NFyuHwXeO1xR8kfADzL6H8LBJLcDTwO3AFTVkSQHGYX9NLDXK0okrWVLvarkBy/kh1bVY4yO2he68Szr7wP2Xcg5SFJXS72qZEuSX09yKslzSX41yZaVnpwk6aWW+uXkexida34do0vx3j+MSZImbKnh3lhV76mq08PjPsDr7SRpCpYa7s8muTXJuuFxK/C5lZyYJGlxSw33DwE/AHwGOAl8P6MrQSRJE7bUywH/ObC7qv4nQJINwDsYBV2SNEFLPeL+5hejDVBVnwfeuDJTkiSdy1LD/bIF98fewNKP1iVJF9BS4/uvgP+a5H2Mfur+A/iDGEmaiqX+cvL+JLOMbiwV4Hur6uiKzkyStKgln+4YQm2sJWnKlnVbV0nS9BhuSWrGcEtSM4Zbkpox3JLUjOGWpGYMtyQ1Y7glqRnDLUnNGG5JasZwS1IzhluSmjHcktSM4ZakZgy3JDVjuCWpGcMtSc0YbklqxnBLUjOGW5KaMdyS1IzhlqRmDLckNWO4JamZ9dOewGp0/U/eP+0paAI+9nO3TXsK0rJ4xC1JzRhuSWrGcEtSM4Zbkpox3JLUjOGWpGYMtyQ1Y7glqZmphTvJuiSfSPKbw/sNSR5O8tTwfPnYuncmOZ7kWJKbpjVnSVoNpnnE/ePAk2Pv7wAOV9U24PDwniTbgV3AtcAO4J4k6yY8V0laNaYS7iRbgO8CfnlseCdwYHh9ALh5bPzBqnqhqk4Ax4EbJjRVSVp1pnXE/QvATwH/Z2zsqqo6CTA8XzmMbwaeGVtvbhh7iSR7kswmmZ2fn7/gk5ak1WDi4U7y3cCpqvrYUjdZZKwWW7Gq9lfVTFXNbNy4cdlzlKTVbBp3B/w24HuSfCfwSuCyJP8BeC7Jpqo6mWQTcGpYfw64emz7LcCzE52xJK0iEz/irqo7q2pLVW1l9KXj71TVrcAhYPew2m7goeH1IWBXkkuSXANsAx6d8LQladVYTffjvhs4mOR24GngFoCqOpLkIHAUOA3sraoz05umJE3XVMNdVR8CPjS8/hxw41nW2wfsm9jEJGkV85eTktSM4ZakZgy3JDVjuCWpGcMtSc0YbklqxnBLUjOGW5KaMdyS1IzhlqRmDLckNWO4JakZwy1JzRhuSWrGcEtSM4Zbkpox3JLUjOGWpGYMtyQ1Y7glqRnDLUnNGG5JasZwS1IzhluSmjHcktSM4ZakZgy3JDVjuCWpGcMtSc0YbklqxnBLUjOGW5KaMdyS1IzhlqRmDLckNWO4JakZwy1JzRhuSWrGcEtSM4Zbkpox3JLUjOGWpGYMtyQ1Y7glqZmJhzvJ1Ul+N8mTSY4k+fFhfEOSh5M8NTxfPrbNnUmOJzmW5KZJz1mSVpNpHHGfBv5RVX0j8CZgb5LtwB3A4araBhwe3jMs2wVcC+wA7kmybgrzlqRVYeLhrqqTVfXx4fUXgCeBzcBO4MCw2gHg5uH1TuDBqnqhqk4Ax4EbJjppSVpFpnqOO8lW4I3AR4GrquokjOIOXDmsthl4ZmyzuWFssf3tSTKbZHZ+fn7F5i1J0zS1cCd5NfCrwNuq6vlzrbrIWC22YlXtr6qZqprZuHHjhZimJK06Uwl3kpczivZ7q+rXhuHnkmwalm8CTg3jc8DVY5tvAZ6d1FwlabWZxlUlAf4d8GRV/fzYokPA7uH1buChsfFdSS5Jcg2wDXh0UvOVpNVm/RQ+89uAvwc8nuSxYeyngbuBg0luB54GbgGoqiNJDgJHGV2Rsreqzkx81pK0Skw83FX1Byx+3hrgxrNssw/Yt2KTkqRG/OWkJDVjuCWpGcMtSc0YbklqxnBLUjOGW5KaMdyS1IzhlqRmDLckNWO4JakZwy1JzRhuSWrGcEtSM4Zbkpox3JLUjOGWpGYMtyQ1Y7glqRnDLUnNGG5JasZwS1IzhluSmjHcktSM4ZakZgy3JDVjuCWpGcMtSc0YbklqxnBLUjOGW5KaMdyS1IzhlqRmDLckNWO4JakZwy1JzRhuSWrGcEtSM4Zbkpox3JLUjOGWpGYMtyQ1Y7glqRnDLUnNGG5JaqZNuJPsSHIsyfEkd0x7PpI0LS3CnWQd8EvA3wa2A29Jsn26s5Kk6WgRbuAG4HhV/VFVfRl4ENg55TlJ0lSsn/YElmgz8MzY+zngWxaulGQPsGd4+8UkxyYwt4vFFcBnpz2JSco7dk97CmvNmvs7xl053z38VlXtWDjYJdyL/enrJQNV+4H9Kz+di0+S2aqamfY8dPHy79iF0+VUyRxw9dj7LcCzU5qLJE1Vl3D/N2BbkmuSvALYBRya8pwkaSpanCqpqtNJfgT4ILAOuLeqjkx5WhcbTzFppfl37AJJ1UtOFUuSVrEup0okSQPDLUnNGG55OwGtqCT3JjmV5Ilpz+ViYbjXOG8noAm4D3jJj0i0fIZb3k5AK6qqPgx8ftrzuJgYbi12O4HNU5qLpCUw3FrS7QQkrR6GW95OQGrGcMvbCUjNGO41rqpOAy/eTuBJ4KC3E9CFlOQB4BHg9Unmktw+7Tl150/eJakZj7glqRnDLUnNGG5JasZwS1IzhluSmjHcuqglOZPksSRPJHl/ktcM41uTfGlY9uLjtiQfHV4/nWR+bNnWJJ9O8niSP0zye0m+bsFnPZTkkQVjr0/yoWEfTybZP7bsryV5NMknh8eeifxHUXteDqiLWpIvVtWrh9cHgE9V1b4kW4HfrKrrzrLdW4GZqvqRsbFPD2OfTfLPgNdV1d8flr0GeBz4IvCdVXViGP8gcE9VPTS8/6aqejzJa4FHgZur6uNJrmB0Lf3PVNV/vuD/IXRR8Yhba8kjXLgbaC3c1/cB72d0d8VdY+ObGN1WAICqenx4uRe4r6o+Pox/FvgpwPuh6ysy3FoThvuO38j//3P+b1hwquSv/wV2uQP4jbH3bwEeGB5vGRv/18DvJPlAkp948VQNcC3wsQX7nB3GpXMy3LrYXZrkMeBzwAbg4bFl/6Oq3jD2+P0l7O93k5wCvh34FYAkVwF/CfiDqvoUcDrJdQBV9R7gG4H/BLwZ+EiSSxjdlXGx85Seu9RXZLh1sftSVb0B+DrgFYxOUZyPvzns6wjws8PY3wUuB04M58G3Mna6pKqerap7q2oncBq4bth+ZsG+rweOnuf8tAYYbq0JVfUnwI8B/zjJy89zX18C3gbclmQDo1MjO6pqa1VtZRTgXfD//j3Plw+vXwt8DfDHjP65uLcmecOw7GuAfwH8y/OZm9aG9dOegDQpVfWJJP+dUVR/n+Ec99gq91bVu5a4r5PDXe/2Al8LfGRs2Ykkzyf5FuA7gHcm+dNh8U9W1WcAktwK/NskX83o1MkvVNX7z+9PqbXAywElqRlPlUhSM4Zbkpox3JLUjOGWpGYMtyQ1Y7glqRnDLUnN/F+0V6Q5a4N3pAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Grafica de la cantidad por cada clase, se evidencia que se tienen dos clases 0 para cuando los vuelos no tienen retraso\n",
    "#y 1 en caso de que exista\n",
    "sns.catplot('RETRASO',data= dataset, kind=\"count\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    1145\n",
       "0     447\n",
       "Name: RETRASO, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Genero la consulta para saber la cantidad (numérica) de cada cada y confirmo el tipo de dato de esa clase\n",
    "dataset['RETRASO'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Gráfico de distribución para cada variable numérica\n",
    "# ==============================================================================\n",
    "# Ajustar número de subplots en función del número de columnas\n",
    "fig, axes = plt.subplots(nrows=3, ncols=3, figsize=(9, 5))\n",
    "axes = axes.flat\n",
    "columnas_numeric = dataset.select_dtypes(include=['float64', 'int']).columns\n",
    "\n",
    "for i, colum in enumerate(columnas_numeric):\n",
    "    sns.histplot(\n",
    "        data    = dataset,\n",
    "        x       = colum,\n",
    "        stat    = \"count\",\n",
    "        kde     = True,\n",
    "        color   = (list(plt.rcParams['axes.prop_cycle'])*2)[i][\"color\"],\n",
    "        line_kws= {'linewidth': 2},\n",
    "        alpha   = 0.3,\n",
    "        ax      = axes[i]\n",
    "    )\n",
    "    axes[i].set_title(colum, fontsize = 10, fontweight = \"bold\")\n",
    "    axes[i].tick_params(labelsize = 8)\n",
    "    axes[i].set_xlabel(\"\")\n",
    "\n",
    "\n",
    "    \n",
    "fig.tight_layout()\n",
    "plt.subplots_adjust(top = 0.9)\n",
    "fig.suptitle('Distribución variables numéricas', fontsize = 10, fontweight = \"bold\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "AHp3M9ZmrIxj"
   },
   "source": [
    "# Clasificación- Red Neuronal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Entrenamiento de los datos, aqui tengo los datos de entrenamiento y pruebas\n",
    "train_dataset = dataset.sample(frac=0.8,random_state=0)\n",
    "test_dataset = dataset.drop(train_dataset.index)\n",
    "\n",
    "#No tengo en cuenta la columba RETRASO que será nuestra clase, no es tenida en cuenta porque \n",
    "#que me debe de arrojar como resultado final es saber si se comporta el vuelo dentro de alguna\n",
    "#de esas dos clases\n",
    "train_labels = train_dataset.pop('RETRASO')\n",
    "test_labels = test_dataset.pop('RETRASO')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ARR_DELAY_NEW</th>\n",
       "      <td>1274.0</td>\n",
       "      <td>5.472527e+00</td>\n",
       "      <td>16.545435</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>253.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DAY_OF_WEEK</th>\n",
       "      <td>1274.0</td>\n",
       "      <td>3.171115e+00</td>\n",
       "      <td>0.686932</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ORIGIN_AIRPORT_SEQ_ID</th>\n",
       "      <td>1274.0</td>\n",
       "      <td>1.391968e+06</td>\n",
       "      <td>143095.620838</td>\n",
       "      <td>1014005.0</td>\n",
       "      <td>1383002.0</td>\n",
       "      <td>1425005.5</td>\n",
       "      <td>1483106.0</td>\n",
       "      <td>1537604.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DEST_AIRPORT_SEQ_ID</th>\n",
       "      <td>1274.0</td>\n",
       "      <td>1.298563e+06</td>\n",
       "      <td>150376.840509</td>\n",
       "      <td>1014005.0</td>\n",
       "      <td>1129202.0</td>\n",
       "      <td>1320402.0</td>\n",
       "      <td>1410702.0</td>\n",
       "      <td>1537604.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DEP_DELAY_NEW</th>\n",
       "      <td>1274.0</td>\n",
       "      <td>6.994505e+00</td>\n",
       "      <td>17.876045</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>261.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AIR_TIME</th>\n",
       "      <td>1274.0</td>\n",
       "      <td>1.003556e+02</td>\n",
       "      <td>54.893111</td>\n",
       "      <td>20.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>123.0</td>\n",
       "      <td>321.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DISTANCE</th>\n",
       "      <td>1274.0</td>\n",
       "      <td>7.165447e+02</td>\n",
       "      <td>460.526820</td>\n",
       "      <td>84.0</td>\n",
       "      <td>371.0</td>\n",
       "      <td>575.5</td>\n",
       "      <td>920.0</td>\n",
       "      <td>2462.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        count          mean            std        min  \\\n",
       "ARR_DELAY_NEW          1274.0  5.472527e+00      16.545435        0.0   \n",
       "DAY_OF_WEEK            1274.0  3.171115e+00       0.686932        1.0   \n",
       "ORIGIN_AIRPORT_SEQ_ID  1274.0  1.391968e+06  143095.620838  1014005.0   \n",
       "DEST_AIRPORT_SEQ_ID    1274.0  1.298563e+06  150376.840509  1014005.0   \n",
       "DEP_DELAY_NEW          1274.0  6.994505e+00      17.876045        0.0   \n",
       "AIR_TIME               1274.0  1.003556e+02      54.893111       20.0   \n",
       "DISTANCE               1274.0  7.165447e+02     460.526820       84.0   \n",
       "\n",
       "                             25%        50%        75%        max  \n",
       "ARR_DELAY_NEW                0.0        0.0        2.0      253.0  \n",
       "DAY_OF_WEEK                  3.0        3.0        4.0        4.0  \n",
       "ORIGIN_AIRPORT_SEQ_ID  1383002.0  1425005.5  1483106.0  1537604.0  \n",
       "DEST_AIRPORT_SEQ_ID    1129202.0  1320402.0  1410702.0  1537604.0  \n",
       "DEP_DELAY_NEW                0.0        0.0        6.0      261.0  \n",
       "AIR_TIME                    59.0       83.0      123.0      321.0  \n",
       "DISTANCE                   371.0      575.5      920.0     2462.0  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#A continuación genero una descripción estadistica de los datos, para saber la cantidad de datos por atributo, la media\n",
    "#la desviación estándar, minimo, maximo\n",
    "train_stats = train_dataset.describe()\n",
    "train_stats = train_stats.transpose()\n",
    "train_stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Normalización de los datos\n",
    "\n",
    "La normalización de los datos se realiza para evitar cualquier tipo de anomalía, redundancia ó sesgo de la información. \n",
    "\n",
    "Es una buena práctica normalizar funciones que utilizan diferentes escalas y rangos. Aunque el modelo podría  converger sin normalización de características, dificulta el entrenamiento y hace que el modelo resultante dependa de la elección de las unidades utilizadas en la entrada."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def norm(x):\n",
    "  return (x - train_stats['mean']) / train_stats['std']\n",
    "normed_train_data = norm(train_dataset)\n",
    "normed_test_data = norm(test_dataset)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "F_72b0LCNbjx"
   },
   "source": [
    "## Modelo "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Comienzo a crear el modelo\n",
    "#Una vez realizada la clasificación, declaramos el modelo secuencial \n",
    "model = keras.Sequential()\n",
    "#Luego, con la instrucción Dense, añadimos una capa oculta de la red neuronal\n",
    "#La primera tendrá 50 nodos, la segunda 1. Para la función de activación usaremos en las capas ocultas ReLu y \n",
    "#se utilizan para pasar inicializadores de capas el he_uniform que es la qu distingue de que rango inicia y donde finaliza\n",
    "model.add(Dense(50, input_shape=[len(train_dataset.keys())], activation='relu', kernel_initializer='he_uniform'))\n",
    "\n",
    "#Dense son las capas de las funciones neuronales, y la activación es sigmoide que es el modelo para trabajar con clases binarias, \n",
    "#ya que devuelve 0 ó 1\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "#El optimizador de descenso de gradiente estocástico.\n",
    "#Incluye soporte para el impulso, la disminución de la tasa de aprendizaje y el impulso de Nesterov.\n",
    "opt = SGD(lr=0.01, momentum=0.9)\n",
    "\n",
    "#La entropía cruzada se puede especificar como la función de pérdida en Keras especificando ' binary_crossentropy ' al compilar el modelo.\n",
    "#Se crea un Optimizador en función del pedido creado\n",
    "#con una metrica en busca de la exactitud\n",
    "model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])\n",
    "\n",
    "# modelo de ajuste\n",
    "#Epoch es el número de veces que se ejecutarán los algoritmos de forwardpropagation y backpropagation. \n",
    "#En cada ciclo (epoch) todos los datos de entrenamiento pasan por la red neuronal para que esta aprenda sobre ellos, \n",
    "#realice un ciclo de 100\n",
    "#verbose es el modo de reporte de avance, maneja números entero en mi caso puse 0\n",
    "history = model.fit(normed_train_data, train_labels, epochs=100, verbose=0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40/40 - 0s - loss: 0.0384 - accuracy: 0.9882\n",
      "Test accuracy: 0.9937106966972351\n",
      "Test Loss: 0.026, Train accuracy: 0.988, Test accuracy: 0.994\n"
     ]
    }
   ],
   "source": [
    "# Evaluación del modelo- Evaluar la exactitud\n",
    "train_loss, train_acc = model.evaluate(normed_train_data, train_labels, verbose=2)\n",
    "test_loss, test_acc = model.evaluate(normed_test_data, test_labels, verbose=0)\n",
    "print('Test accuracy:', test_acc)\n",
    "print('Test Loss: %.3f, Train accuracy: %.3f, Test accuracy: %.3f' % (test_loss, train_acc, test_acc))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se cuenta con muy baja perdidas 0.04, eso indica que la exactitud del modelo es muy alta es del 99%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Matriz de confusión: \n",
      "[[ 82   2]\n",
      " [  0 234]]\n",
      "\n",
      "Exactitud de la validación: \n",
      "99.37106918238993\n"
     ]
    }
   ],
   "source": [
    "#Predicción el modelo\n",
    "#Cuando se realiza la predicción del modelo pese que es un modelo Sigmoid que arrojaría 0 y 1\n",
    "#Se pone al finalizar la predicción .round() para que las salida sea en binaria\n",
    "predictions = model.predict(normed_test_data).round()\n",
    "\n",
    "\n",
    "def Estadisticas_Mneuronal(clases, crt):\n",
    "    df_estadistica = pd.DataFrame(columns = ['Clase', 'TP', 'TN', 'FP', 'FN', 'TPR', 'TNR', 'PPV', 'NPV', 'FPR', 'FNR', 'FDR', 'ACC'])\n",
    "    temp = pd.DataFrame()\n",
    "    \n",
    "    TP = np.diag(crt)\n",
    "    FP = crt.sum(axis=0) - np.diag(crt)\n",
    "    FN = crt.sum(axis=1) - np.diag(crt)\n",
    "    TN = crt.sum() - (FP + FN + TP)\n",
    "    \n",
    "# True positive rate\n",
    "    TPR = TP/(TP+FN)\n",
    "# Especificidad o true negative rate\n",
    "    TNR = TN/(TN+FP) \n",
    "# Precision o valores predictivos positivos \n",
    "    PPV = TP/(TP+FP)\n",
    "# Valores predictivos negativos \n",
    "    NPV = TN/(TN+FN)\n",
    "# Tasa de falsos positivos\n",
    "    FPR = FP/(FP+TN)\n",
    "# Tasa de falsos negativos\n",
    "    FNR = FN/(TP+FN)\n",
    "# Exactitud general\n",
    "    ACC = (TP+TN)/(TP+FP+FN+TN)\n",
    "\n",
    "    for c, clase in enumerate (clases):\n",
    "        temp ['Clase'] = [clase]\n",
    "        temp ['TP'] = TP[c]\n",
    "        temp ['TN'] = TN[c]\n",
    "        temp ['FP'] = FP[c]\n",
    "        temp ['FN'] = FN[c]\n",
    "        temp ['TPR'] = TPR[c]\n",
    "        temp ['TNR'] = TNR[c]\n",
    "        temp ['PPV'] = PPV[c]\n",
    "        temp ['NPV'] = NPV[c]\n",
    "        temp ['FPR'] = FPR[c]\n",
    "        temp ['FNR'] = FNR[c]\n",
    "        temp ['ACC'] = ACC[c]\n",
    "        df_estadistica = df_estadistica.append(temp)\n",
    "    \n",
    "    df_estadistica.set_index('Clase', inplace = True)\n",
    "    return df_estadistica\n",
    "\n",
    "\n",
    "#Matriz de confusion\n",
    "neuronal = confusion_matrix(test_labels, predictions)\n",
    "print('Matriz de confusión: ')\n",
    "print(neuronal)\n",
    "\n",
    "precision_neuronal = Estadisticas_Mneuronal([0,1], neuronal)\n",
    "\n",
    "#Exactitud\n",
    "print('\\nExactitud de la validación: ')\n",
    "exactitud = accuracy_score(\n",
    "            y_true = test_labels,\n",
    "            y_pred = predictions,\n",
    "            normalize = True\n",
    "            )\n",
    "print(str(100 * exactitud ))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TP</th>\n",
       "      <th>TN</th>\n",
       "      <th>FP</th>\n",
       "      <th>FN</th>\n",
       "      <th>TPR</th>\n",
       "      <th>TNR</th>\n",
       "      <th>PPV</th>\n",
       "      <th>NPV</th>\n",
       "      <th>FPR</th>\n",
       "      <th>FNR</th>\n",
       "      <th>FDR</th>\n",
       "      <th>ACC</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Clase</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>82</td>\n",
       "      <td>234</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.97619</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.991525</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.02381</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.993711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>234</td>\n",
       "      <td>82</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.97619</td>\n",
       "      <td>0.991525</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.02381</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.993711</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        TP   TN FP FN      TPR      TNR       PPV       NPV      FPR      FNR  \\\n",
       "Clase                                                                           \n",
       "0       82  234  0  2  0.97619  1.00000  1.000000  0.991525  0.00000  0.02381   \n",
       "1      234   82  2  0  1.00000  0.97619  0.991525  1.000000  0.02381  0.00000   \n",
       "\n",
       "       FDR       ACC  \n",
       "Clase                 \n",
       "0      NaN  0.993711  \n",
       "1      NaN  0.993711  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Estadisticas de la Matriz de confusión\n",
    "valores = dataset[\"RETRASO\"].unique()\n",
    "red = Estadisticas_Mneuronal(valores, neuronal)\n",
    "red"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "AHp3M9ZmrIxj"
   },
   "source": [
    "# Árbol de clasificación Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Modelo: {'criterion': 'gini', 'max_depth': None, 'max_features': 'auto', 'n_estimators': 20} ✓\n",
      "Modelo: {'criterion': 'gini', 'max_depth': None, 'max_features': 'log2', 'n_estimators': 20} ✓\n",
      "Modelo: {'criterion': 'gini', 'max_depth': 3, 'max_features': 'auto', 'n_estimators': 20} ✓\n",
      "Modelo: {'criterion': 'gini', 'max_depth': 3, 'max_features': 'log2', 'n_estimators': 20} ✓\n",
      "Modelo: {'criterion': 'gini', 'max_depth': 10, 'max_features': 'auto', 'n_estimators': 20} ✓\n",
      "Modelo: {'criterion': 'gini', 'max_depth': 10, 'max_features': 'log2', 'n_estimators': 20} ✓\n",
      "Modelo: {'criterion': 'gini', 'max_depth': 20, 'max_features': 'auto', 'n_estimators': 20} ✓\n",
      "Modelo: {'criterion': 'gini', 'max_depth': 20, 'max_features': 'log2', 'n_estimators': 20} ✓\n",
      "Modelo: {'criterion': 'entropy', 'max_depth': None, 'max_features': 'auto', 'n_estimators': 20} ✓\n",
      "Modelo: {'criterion': 'entropy', 'max_depth': None, 'max_features': 'log2', 'n_estimators': 20} ✓\n",
      "Modelo: {'criterion': 'entropy', 'max_depth': 3, 'max_features': 'auto', 'n_estimators': 20} ✓\n",
      "Modelo: {'criterion': 'entropy', 'max_depth': 3, 'max_features': 'log2', 'n_estimators': 20} ✓\n",
      "Modelo: {'criterion': 'entropy', 'max_depth': 10, 'max_features': 'auto', 'n_estimators': 20} ✓\n",
      "Modelo: {'criterion': 'entropy', 'max_depth': 10, 'max_features': 'log2', 'n_estimators': 20} ✓\n",
      "Modelo: {'criterion': 'entropy', 'max_depth': 20, 'max_features': 'auto', 'n_estimators': 20} ✓\n",
      "Modelo: {'criterion': 'entropy', 'max_depth': 20, 'max_features': 'log2', 'n_estimators': 20} ✓\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>oob_accuracy</th>\n",
       "      <th>modelo</th>\n",
       "      <th>criterion</th>\n",
       "      <th>max_depth</th>\n",
       "      <th>max_features</th>\n",
       "      <th>n_estimators</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>(DecisionTreeClassifier(max_features='auto', r...</td>\n",
       "      <td>gini</td>\n",
       "      <td>NaN</td>\n",
       "      <td>auto</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>(DecisionTreeClassifier(max_features='log2', r...</td>\n",
       "      <td>gini</td>\n",
       "      <td>NaN</td>\n",
       "      <td>log2</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>(DecisionTreeClassifier(max_depth=10, max_feat...</td>\n",
       "      <td>gini</td>\n",
       "      <td>10.0</td>\n",
       "      <td>auto</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.0</td>\n",
       "      <td>(DecisionTreeClassifier(max_depth=10, max_feat...</td>\n",
       "      <td>gini</td>\n",
       "      <td>10.0</td>\n",
       "      <td>log2</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   oob_accuracy                                             modelo criterion  \\\n",
       "0           1.0  (DecisionTreeClassifier(max_features='auto', r...      gini   \n",
       "1           1.0  (DecisionTreeClassifier(max_features='log2', r...      gini   \n",
       "4           1.0  (DecisionTreeClassifier(max_depth=10, max_feat...      gini   \n",
       "5           1.0  (DecisionTreeClassifier(max_depth=10, max_feat...      gini   \n",
       "\n",
       "   max_depth max_features  n_estimators  \n",
       "0        NaN         auto            20  \n",
       "1        NaN         log2            20  \n",
       "4       10.0         auto            20  \n",
       "5       10.0         log2            20  "
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Metodo de Ensemble Learning\n",
    "# Grid de hiperparámetros evaluados\n",
    "\n",
    "\n",
    "param_grid = ParameterGrid(\n",
    "                {'n_estimators': [20],\n",
    "                 'max_features': ['auto','log2'],\n",
    "                 'max_depth'   : [None, 3, 10, 20],\n",
    "                 'criterion'   : ['gini', 'entropy']\n",
    "                }\n",
    "            )\n",
    "\n",
    "# Loop para ajustar un modelo con cada combinación de hiperparámetros\n",
    "\n",
    "resultados = {'params': [], 'oob_accuracy': [], 'modelo': []}\n",
    "\n",
    "for params in param_grid:\n",
    "    \n",
    "    modelorandom = RandomForestClassifier(\n",
    "                oob_score    = True,\n",
    "                n_jobs       = -1,\n",
    "                random_state = 123,\n",
    "                ** params\n",
    "             )\n",
    "    \n",
    "    \n",
    "    modelorandom.fit(normed_train_data, train_labels)\n",
    "    \n",
    "    resultados['params'].append(params)\n",
    "    resultados['oob_accuracy'].append(modelorandom.oob_score_)\n",
    "    resultados['modelo'].append(modelorandom)\n",
    "    print (F\"Modelo: {params} \\u2713\")\n",
    "\n",
    "#Resultados\n",
    "\n",
    "resultados = pd.DataFrame(resultados)\n",
    "resultados = pd.concat([resultados, resultados['params'].apply(pd.Series)], axis=1)\n",
    "resultados = resultados.sort_values('oob_accuracy', ascending=False)\n",
    "resultados = resultados.drop(columns = 'params')\n",
    "resultados.head(4)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Entrenamiento del modelo final\n",
    "modelorandom_final = resultados.iloc[0,1]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Matriz de confusión: \n",
      "[[ 84   0]\n",
      " [  0 234]]\n",
      "\n",
      "Exactitud de la validación: \n",
      "100.0\n"
     ]
    }
   ],
   "source": [
    "predicciones= modelorandom_final.predict(X = normed_test_data)\n",
    "\n",
    "#Se genera la matriz de confusión\n",
    "crt_random = confusion_matrix(test_labels, predicciones)\n",
    "print('Matriz de confusión: ')\n",
    "print(crt_random)\n",
    "\n",
    "def Estadisticas_MC(clases, mc):\n",
    "    df_estadistica = pd.DataFrame(columns = ['Clase', 'TP', 'TN', 'FP', 'FN', 'TPR', 'TNR', 'PPV', 'NPV', 'FPR', 'FNR', 'FDR', 'ACC'])\n",
    "    temp = pd.DataFrame()\n",
    "    \n",
    "    TP = np.diag(mc)\n",
    "    FP = mc.sum(axis=0) - np.diag(mc)\n",
    "    FN = mc.sum(axis=1) - np.diag(mc)\n",
    "    TN = mc.sum() - (FP + FN + TP)\n",
    "    \n",
    "# True positive rate\n",
    "    TPR = TP/(TP+FN)\n",
    "# Especificidad o true negative rate\n",
    "    TNR = TN/(TN+FP) \n",
    "# Precision o valores predictivos positivos \n",
    "    PPV = TP/(TP+FP)\n",
    "# Valores predictivos negativos \n",
    "    NPV = TN/(TN+FN)\n",
    "# Tasa de falsos positivos\n",
    "    FPR = FP/(FP+TN)\n",
    "# Tasa de falsos negativos\n",
    "    FNR = FN/(TP+FN)\n",
    "# Exactitud general\n",
    "    ACC = (TP+TN)/(TP+FP+FN+TN)\n",
    "\n",
    "    for c, clase in enumerate (clases):\n",
    "        temp ['Clase'] = [clase]\n",
    "        temp ['TP'] = TP[c]\n",
    "        temp ['TN'] = TN[c]\n",
    "        temp ['FP'] = FP[c]\n",
    "        temp ['FN'] = FN[c]\n",
    "        temp ['TPR'] = TPR[c]\n",
    "        temp ['TNR'] = TNR[c]\n",
    "        temp ['PPV'] = PPV[c]\n",
    "        temp ['NPV'] = NPV[c]\n",
    "        temp ['FPR'] = FPR[c]\n",
    "        temp ['FNR'] = FNR[c]\n",
    "        temp ['ACC'] = ACC[c]\n",
    "        df_estadistica = df_estadistica.append(temp)\n",
    "    \n",
    "    df_estadistica.set_index('Clase', inplace = True)\n",
    "    return df_estadistica\n",
    "\n",
    "#Exactitud\n",
    "print('\\nExactitud de la validación: ')\n",
    "exactitud = accuracy_score(\n",
    "            y_true = test_labels,\n",
    "            y_pred = predicciones,\n",
    "            normalize = True\n",
    "            )\n",
    "print(str(100 * exactitud ))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TP</th>\n",
       "      <th>TN</th>\n",
       "      <th>FP</th>\n",
       "      <th>FN</th>\n",
       "      <th>TPR</th>\n",
       "      <th>TNR</th>\n",
       "      <th>PPV</th>\n",
       "      <th>NPV</th>\n",
       "      <th>FPR</th>\n",
       "      <th>FNR</th>\n",
       "      <th>FDR</th>\n",
       "      <th>ACC</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Clase</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>84</td>\n",
       "      <td>234</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>234</td>\n",
       "      <td>84</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        TP   TN FP FN  TPR  TNR  PPV  NPV  FPR  FNR  FDR  ACC\n",
       "Clase                                                        \n",
       "0       84  234  0  0  1.0  1.0  1.0  1.0  0.0  0.0  NaN  1.0\n",
       "1      234   84  0  0  1.0  1.0  1.0  1.0  0.0  0.0  NaN  1.0"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Estadisticas de la Matriz de confusión\n",
    "valores = dataset[\"RETRASO\"].unique()\n",
    "rand = Estadisticas_Mneuronal(valores, crt_random)\n",
    "rand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Realizo la comparación de lo arrojado anteriormente en cuanto a TP, TN, TPR y TNR\n",
    "red['model'] = 'Red_neuronal'\n",
    "red.reset_index(inplace=True)\n",
    "rand ['modelo'] = 'random'\n",
    "rand.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>modelo</th>\n",
       "      <th>Clase</th>\n",
       "      <th>TP</th>\n",
       "      <th>TN</th>\n",
       "      <th>TPR</th>\n",
       "      <th>TNR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>81</td>\n",
       "      <td>234</td>\n",
       "      <td>0.964286</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>random</td>\n",
       "      <td>0</td>\n",
       "      <td>84</td>\n",
       "      <td>234</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>234</td>\n",
       "      <td>81</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.964286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>random</td>\n",
       "      <td>1</td>\n",
       "      <td>234</td>\n",
       "      <td>84</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   modelo  Clase   TP   TN       TPR       TNR\n",
       "0     NaN      0   81  234  0.964286  1.000000\n",
       "0  random      0   84  234  1.000000  1.000000\n",
       "1     NaN      1  234   81  1.000000  0.964286\n",
       "1  random      1  234   84  1.000000  1.000000"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comparar_mod = Neuronal.append(rand)\n",
    "comparar_mod = comparar_mod[['modelo', 'Clase', 'TP', 'TN', 'TPR', 'TNR']]\n",
    "comparar_mod.sort_values(by=['Clase'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#https://machinelearningmastery.com/how-to-choose-loss-functions-when-training-deep-learning-neural-networks/\n",
    "#https://www.tensorflow.org/tutorials/keras/classification?hl=es-419"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "regression.ipynb",
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
